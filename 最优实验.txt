#最优距离
# # 将图像像素值展平
# flattened = log_magnitude.flatten()
# # 对展平后的像素值进行排序，并取出最亮的2000个点
# top_2000 = np.partition(flattened, -2000)[-2000:]
# # 计算最亮的2000个点的平均亮度
# average_brightness = np.mean(top_2000)
# print(average_brightness)
# # 获取图像的中心部分
# # center_part = log_magnitude[:, 1712:2312]
# log_magnitude[:, 1850:2150]  =0
# log_magnitude.astype(np.uint8)
# # 打印修改后的图像
# plt.subplot(211)
# plt.imshow(log_magnitude,cmap='gray')
# log_magnitude[log_magnitude < 10] = 0
# log_magnitude[log_magnitude >= 10] = 254
# plt.subplot(212)
# plt.imshow(log_magnitude,cmap='gray')
# img =log_magnitude
# # 找到灰度不为0的点
# non_zero_points = np.nonzero(img)
# # 计算图像的中心坐标
# center = np.array([img.shape[0] // 2, img.shape[1] // 2])
# # 计算每个点到中心的欧式距离
# distances = np.sqrt((non_zero_points[0] - center[0])**2 + (non_zero_points[1] - center[1])**2)
# # 找到最近和最远的距离
# min_distance = np.min(distances)
# max_distance = np.max(distances)
# print('最近的距离:', min_distance)
# print('最远的距离:', max_distance)
# f_shift[log_magnitude == 0] = 0
# f_shift.astype(np.uint8)
# magnitude = np.abs(f_shift)
# plt.imshow(magnitude,cmap='gray')